#!/usr/bin/python

from __future__ import print_function
import os, sys, shutil, zipfile, argparse
try:
	import ConfigParser as configparser
except:
	import configparser

#load config file

try:
	XDG_CONFIG_HOME = os.environ["XDG_CONFIG_HOME"]
except KeyError:
	XDG_CONFIG_HOME = os.path.join(os.environ["HOME"], ".config")
DIR_LASS_CONF = os.path.join(XDG_CONFIG_HOME, "Lass")

cparser = configparser.ConfigParser({
	"DIR_LASS_DATA":"$XDG_DATA_HOME/Lass",
	"FB_DIR_LASS_DATA":"$HOME/.local/share/Lass",
	"DIR_PROJECTS":"$HOME/Documents/Lass"
})
if not cparser.read(os.path.join(DIR_LASS_CONF, "lassconf.ini")):
	raise IOError(os.path.join(DIR_LASS_CONF, "lassconf.ini") + " could not be loaded")

#set global variables from config file

try:
	DIR_LASS_DATA = os.path.expandvars(cparser.get("path", "DIR_LASS_DATA"))
	os.listdir(DIR_LASS_DATA)
except OSError:
	DIR_LASS_DATA = os.path.expandvars(cparser.get("path", "FB_DIR_LASS_DATA"))
try:
	DIR_LASS_LIB = os.path.join(sys.prefix, "local", "share", "lua", "5.1", "lass")
	os.listdir(DIR_LASS_LIB)
except OSError:
	DIR_LASS_LIB = os.path.join(DIR_LASS_DATA, "lua", "5.1", "lass")

DIR_PROJECTS = os.path.expandvars(cparser.get("path", "DIR_PROJECTS"))
DIR_ENGINE_WINDOWS = os.path.join(DIR_LASS_DATA, "engine", "windows")
DIR_ENGINE_OSX = os.path.join(DIR_LASS_DATA, "engine", "osx")
DIR_TEMP = "/tmp"

def getLoveEngineCommand():
	if sys.platform.startswith("win32"):
		return os.path.join(DIR_ENGINE_WINDOWS, "love.exe") + " %s"
	elif sys.platform.startswith("darwin"):
		return "open %s -a " + os.path.join(DIR_ENGINE_OSX, "love.app")
	else:
		return "love %s"

def buildapp(loveFileName, appFolderName=None, dest="."):
	pass

def buildexe(loveFileNameFull, exeFolderName=None, exeFileName=None, dest="."):

	gameName = ".".join(os.path.basename(loveFileNameFull).split(".")[:-1])

	if not exeFileName:
		exeFileName = gameName + ".exe"
	if not exeFolderName:
		exeFolderName = gameName

	if exeFolderName in os.listdir(dest):
		shutil.rmtree(os.path.join(dest, exeFolderName))

	shutil.copytree(DIR_ENGINE_WINDOWS, os.path.join(dest, exeFolderName))

	exeFileNameFull = os.path.join(dest, exeFolderName, exeFileName)
	# loveFileNameFull = os.path.join(dest, exeFolderName, exeFileName)
	#rename love.exe
	os.rename(os.path.join(dest, exeFolderName, "love.exe"), exeFileNameFull)

	# raw_input("breakpoint")

	#append love file to renamed love.exe
	with open(exeFileNameFull, "ab") as exeFile, open(loveFileNameFull, "rb") as loveFile:
	# print(os.path.abspath(loveFileNameFull))
		bytes = loveFile.read()
		exeFile.write(bytes)

def buildgame(sendToTemp=False):

	projName = sys.argv[2]
	projPath = os.path.join(DIR_PROJECTS, projName)
	if sendToTemp:
		buildPath = DIR_TEMP
	else:
		buildPath = os.path.join(projPath, "build")

	try:
		if not sendToTemp and not "build" in os.listdir(projPath):
			os.mkdir(buildPath)
		elif sendToTemp and not DIR_TEMP:
			os.mkdir(buildPath)
	except OSError as e:
		print(e)
		return 

	projFiles = os.listdir(projPath)
	loveFileName = projName + ".love"
	origDir = os.getcwd()

	with zipfile.ZipFile(os.path.join(buildPath, loveFileName), mode='w') as loveFile:

		#add project files
		for f in projFiles:
			if f != "build":
				loveFile.write(os.path.join(projPath, f), f)

		#add lass library
		os.chdir(DIR_LASS_LIB)
		for i, wtup in enumerate(os.walk(".")):
			for j, f in enumerate(wtup[2]):
				fullName = os.path.join(wtup[0], f)
				loveFile.write(fullName, os.path.join("lass", fullName))

	os.chdir(origDir)

	if not sendToTemp:
		buildexe(os.path.join(buildPath, loveFileName), dest=buildPath)

	return os.path.abspath(os.path.join(buildPath, loveFileName))

def newgame():
	pass

def playgame():
	game = buildgame(True)
	os.system(getLoveEngineCommand() % game)
	os.remove(game)

def main():
	try:
		{
			"build": buildgame,
			"new": newgame,
			"play": playgame
		}[sys.argv[1]]()
	except (IndexError, KeyError):
		print("usage: hugahgsd")

if __name__ == "__main__":
	main()
