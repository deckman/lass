#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright 2014â€“2016 Decky Coss

# This file is part of Lass.

# Lass is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Lass is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with Lass.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import print_function
import sys, os, argparse, distutils.sysconfig
from lass import pmtools

def main():

	if sys.platform == "win32":
		pl = "w"
	elif sys.platform == "darwin":
		pl = "o"
	elif os.name == "posix" or sys.platform == "cygwin":
		pl = "l"
	else:
		sys.exit("OS Error: Operating system not supported")

	projects_help = "search for game in default projects folder (currently %s). takes precedence over -e"

	commands = {
		"build": (pmtools.buildGame, [
			(("game",), {
				"type":str,
				"default":".",
				"nargs":"?",
				"help":"name of game project directory"
			}),
			(("-t", "--target"),{
				"type":str,
				"default":pl,
				"help":"ID(s) of target platform(s) combined into a string. valid IDs: w, l, o"
			}),
			(("-l", "--love-only"), {
				"action":"store_true",
				"default":False,
				"help":"create lovefile only (equivalent to -t l)"
			}),
			(("-e", "--examples"), {
				"action":"store_true",
				"default":False,
				"help":"search for game in examples folder"
			})
		]),
		"new": (pmtools.newGame, [
			(("game",), {
				"type":str,
				"default":".",
				"nargs":"?",
				"help":"name of new game project directory"
			}),
		]),
		"new-prefab": (pmtools.newPrefab, [
			(("fileName",), {
				"type":str,
				# "default":"prefab",
				# "nargs":1,
				"help":"file name of new prefab"
			}),
		]),
		"play": (pmtools.playGame, [
			(("game",), {
				"type":str,
				"default":".",
				"nargs":"?",
				"help":"name of game project directory"
			}),
			(("-e", "--examples"), {
				"action":"store_true",
				"default":False,
				"help":"search for game in examples folder"
			}),
			(("-u", "--tests"), {
				"action":"store_true",
				"default":False,
				"help":"search for game in tests folder"
			}),
			(("-s", "--scene"), {
				"type":str,
				"default":"",
				"help":"name of scene to play"
			})
		]),
	}

	helpMsg = (
		"usage: lasspm <command> [<args>]\n"
		"for help regarding a specific command, use lasspm <command> --help\n"
		"commands: "
	) + ", ".join(sorted(commands.keys()))

	try:
		command = commands[sys.argv[1]]
	except (IndexError, KeyError):
		sys.exit(helpMsg)

	sys.argv[0] = os.path.basename(sys.argv[0])
	parser = argparse.ArgumentParser(prog = "%s %s" % tuple(sys.argv[:2]))
	for argument in command[1]:
		parser.add_argument(*argument[0], **argument[1])

	#use [2:] to avoid the command being treated as a positional argument
	args = parser.parse_args(sys.argv[2:])

	if hasattr(args, "love_only"):
		if args.love_only:
			args.target = "l"
		args.__dict__.pop("love_only")

	try:
		command[0](**args.__dict__)
	except Exception as e:
		sys.exit("{0}: {1}".format(type(e).__name__, e.message))

if __name__ == "__main__":
	main()
